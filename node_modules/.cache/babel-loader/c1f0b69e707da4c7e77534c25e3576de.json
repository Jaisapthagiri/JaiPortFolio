{"ast":null,"code":"/**\n * Enhanced random function, selects a random value between a minimum and maximum. If the values provided are both\n * integers then the number returned will be an integer, otherwise the return number will be a decimal.\n * @param min The minimum value\n * @param max The maximum value\n */\nexport function random(min, max) {\n  const randomNumber = Math.random() * (max - min + 1) + min;\n\n  if (!Number.isInteger(min) || !Number.isInteger(max)) {\n    return randomNumber;\n  } else {\n    return Math.floor(randomNumber);\n  }\n}\n/**\n * Linear interpolation function to gradually step towards a target value\n * @param start The current value\n * @param end The target value\n * @param normal The rate of change between 0 and 1 (0 = no change, 1 = instant)\n */\n\nexport function lerp(start, end, normal) {\n  return (1 - normal) * start + normal * end;\n}\n/**\n * Selects a random item from an array of inputs.\n *\n * @param items The array of items to choose from\n * @returns A random item selected from the array\n */\n\nexport function randomElement(items) {\n  const index = Math.floor(Math.random() * items.length);\n  return items[index];\n}\n/**\n * Gets the height and width of the provided HTML element\n * @param element The html element to measure\n */\n\nexport function getSize(element) {\n  if (!element) return {\n    height: 0,\n    width: 0\n  };\n  return {\n    height: element.offsetHeight,\n    width: element.offsetWidth\n  };\n}\n/**\n * Store the value of PI * 2.\n *\n * This is so we can avoid calculating this value every time we draw a circle.\n */\n\nexport const twoPi = Math.PI * 2;","map":{"version":3,"mappings":"AAAA;;;;;;AAMA,OAAM,SAAUA,MAAV,CAAiBC,GAAjB,EAA8BC,GAA9B,EAAyC;AAC7C,QAAMC,YAAY,GAAGC,IAAI,CAACJ,MAAL,MAAiBE,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAAvD;;AAEA,MAAI,CAACI,MAAM,CAACC,SAAP,CAAiBL,GAAjB,CAAD,IAA0B,CAACI,MAAM,CAACC,SAAP,CAAiBJ,GAAjB,CAA/B,EAAsD;AACpD,WAAOC,YAAP;AACD,GAFD,MAEO;AACL,WAAOC,IAAI,CAACG,KAAL,CAAWJ,YAAX,CAAP;AACD;AACF;AAED;;;;;;;AAMA,OAAM,SAAUK,IAAV,CAAeC,KAAf,EAA8BC,GAA9B,EAA2CC,MAA3C,EAAyD;AAC7D,SAAO,CAAC,IAAIA,MAAL,IAAeF,KAAf,GAAuBE,MAAM,GAAGD,GAAvC;AACD;AAED;;;;;;;AAMA,OAAM,SAAUE,aAAV,CAA2BC,KAA3B,EAAqC;AACzC,QAAMC,KAAK,GAAGV,IAAI,CAACG,KAAL,CAAWH,IAAI,CAACJ,MAAL,KAAgBa,KAAK,CAACE,MAAjC,CAAd;AACA,SAAOF,KAAK,CAACC,KAAD,CAAZ;AACD;AAED;;;;;AAIA,OAAM,SAAUE,OAAV,CAAkBC,OAAlB,EAA8C;AAClD,MAAI,CAACA,OAAL,EAAc,OAAO;AAAEC,UAAM,EAAE,CAAV;AAAaC,SAAK,EAAE;AAApB,GAAP;AAEd,SAAO;AACLD,UAAM,EAAED,OAAO,CAACG,YADX;AAELD,SAAK,EAAEF,OAAO,CAACI;AAFV,GAAP;AAID;AAED;;;;;;AAKA,OAAO,MAAMC,KAAK,GAAGlB,IAAI,CAACmB,EAAL,GAAU,CAAxB","names":["random","min","max","randomNumber","Math","Number","isInteger","floor","lerp","start","end","normal","randomElement","items","index","length","getSize","element","height","width","offsetHeight","offsetWidth","twoPi","PI"],"sources":["D:\\PortFolio\\node_modules\\react-snowfall\\src\\utils.ts"],"sourcesContent":["/**\r\n * Enhanced random function, selects a random value between a minimum and maximum. If the values provided are both\r\n * integers then the number returned will be an integer, otherwise the return number will be a decimal.\r\n * @param min The minimum value\r\n * @param max The maximum value\r\n */\r\nexport function random(min: number, max: number): number {\r\n  const randomNumber = Math.random() * (max - min + 1) + min\r\n\r\n  if (!Number.isInteger(min) || !Number.isInteger(max)) {\r\n    return randomNumber\r\n  } else {\r\n    return Math.floor(randomNumber)\r\n  }\r\n}\r\n\r\n/**\r\n * Linear interpolation function to gradually step towards a target value\r\n * @param start The current value\r\n * @param end The target value\r\n * @param normal The rate of change between 0 and 1 (0 = no change, 1 = instant)\r\n */\r\nexport function lerp(start: number, end: number, normal: number) {\r\n  return (1 - normal) * start + normal * end\r\n}\r\n\r\n/**\r\n * Selects a random item from an array of inputs.\r\n *\r\n * @param items The array of items to choose from\r\n * @returns A random item selected from the array\r\n */\r\nexport function randomElement<T>(items: T[]): T {\r\n  const index = Math.floor(Math.random() * items.length)\r\n  return items[index]\r\n}\r\n\r\n/**\r\n * Gets the height and width of the provided HTML element\r\n * @param element The html element to measure\r\n */\r\nexport function getSize(element?: HTMLElement | null) {\r\n  if (!element) return { height: 0, width: 0 }\r\n\r\n  return {\r\n    height: element.offsetHeight,\r\n    width: element.offsetWidth,\r\n  }\r\n}\r\n\r\n/**\r\n * Store the value of PI * 2.\r\n *\r\n * This is so we can avoid calculating this value every time we draw a circle.\r\n */\r\nexport const twoPi = Math.PI * 2\r\n"]},"metadata":{},"sourceType":"module"}