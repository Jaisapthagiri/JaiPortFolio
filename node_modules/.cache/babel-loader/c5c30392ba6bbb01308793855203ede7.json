{"ast":null,"code":"import React, { useEffect, useRef } from 'react';\nimport { SnowfallCanvas } from './SnowfallCanvas.js';\nimport { defaultConfig } from './Snowflake.js';\nimport { useComponentSize, useDeepMemo, useSnowfallStyle } from './hooks.js';\nexport const Snowfall = function () {\n  let {\n    color = defaultConfig.color,\n    changeFrequency = defaultConfig.changeFrequency,\n    radius = defaultConfig.radius,\n    speed = defaultConfig.speed,\n    wind = defaultConfig.wind,\n    rotationSpeed = defaultConfig.rotationSpeed,\n    opacity = defaultConfig.opacity,\n    snowflakeCount = 150,\n    images,\n    style\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const mergedStyle = useSnowfallStyle(style);\n  const canvasRef = useRef(null);\n  const canvasSize = useComponentSize(canvasRef);\n  const config = useDeepMemo({\n    color,\n    changeFrequency,\n    radius,\n    speed,\n    wind,\n    rotationSpeed,\n    images,\n    snowflakeCount,\n    opacity\n  }); // A reference to the config used for creating the initial instance\n\n  const configRef = useRef(config);\n  const snowfallCanvasRef = useRef();\n  useEffect(() => {\n    if (!snowfallCanvasRef.current && canvasRef.current) {\n      snowfallCanvasRef.current = new SnowfallCanvas(canvasRef.current, configRef.current);\n    }\n\n    return () => {\n      var _a;\n\n      (_a = snowfallCanvasRef.current) === null || _a === void 0 ? void 0 : _a.pause();\n      snowfallCanvasRef.current = undefined;\n    };\n  }, []);\n  useEffect(() => {\n    if (snowfallCanvasRef.current) {\n      snowfallCanvasRef.current.updateConfig(config);\n    }\n  }, [config]);\n  return React.createElement(\"canvas\", {\n    ref: canvasRef,\n    height: canvasSize.height,\n    width: canvasSize.width,\n    style: mergedStyle,\n    \"data-testid\": \"SnowfallCanvas\"\n  });\n};\nexport default Snowfall;","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,SAASC,cAAT,QAAqD,qBAArD;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,gBAAT,EAA2BC,WAA3B,EAAwCC,gBAAxC,QAAgE,YAAhE;AASA,OAAO,MAAMC,QAAQ,GAAG,YAWc;AAAA,MAXb;AACvBC,SAAK,GAAGL,aAAa,CAACK,KADC;AAEvBC,mBAAe,GAAGN,aAAa,CAACM,eAFT;AAGvBC,UAAM,GAAGP,aAAa,CAACO,MAHA;AAIvBC,SAAK,GAAGR,aAAa,CAACQ,KAJC;AAKvBC,QAAI,GAAGT,aAAa,CAACS,IALE;AAMvBC,iBAAa,GAAGV,aAAa,CAACU,aANP;AAOvBC,WAAO,GAAGX,aAAa,CAACW,OAPD;AAQvBC,kBAAc,GAAG,GARM;AASvBC,UATuB;AAUvBC;AAVuB,GAWa,uEAAnB,EAAmB;AACpC,QAAMC,WAAW,GAAGZ,gBAAgB,CAACW,KAAD,CAApC;AAEA,QAAME,SAAS,GAAGlB,MAAM,CAAoB,IAApB,CAAxB;AACA,QAAMmB,UAAU,GAAGhB,gBAAgB,CAACe,SAAD,CAAnC;AAEA,QAAME,MAAM,GAAGhB,WAAW,CAAuB;AAC/CG,SAD+C;AAE/CC,mBAF+C;AAG/CC,UAH+C;AAI/CC,SAJ+C;AAK/CC,QAL+C;AAM/CC,iBAN+C;AAO/CG,UAP+C;AAQ/CD,kBAR+C;AAS/CD;AAT+C,GAAvB,CAA1B,CANoC,CAkBpC;;AACA,QAAMQ,SAAS,GAAGrB,MAAM,CAACoB,MAAD,CAAxB;AAEA,QAAME,iBAAiB,GAAGtB,MAAM,EAAhC;AAEAD,WAAS,CAAC,MAAK;AACb,QAAI,CAACuB,iBAAiB,CAACC,OAAnB,IAA8BL,SAAS,CAACK,OAA5C,EAAqD;AACnDD,uBAAiB,CAACC,OAAlB,GAA4B,IAAItB,cAAJ,CAAmBiB,SAAS,CAACK,OAA7B,EAAsCF,SAAS,CAACE,OAAhD,CAA5B;AACD;;AAED,WAAO,MAAK;;;AACV,6BAAiB,CAACA,OAAlB,MAAyB,IAAzB,IAAyBC,aAAzB,GAAyB,MAAzB,GAAyBA,GAAEC,KAAF,EAAzB;AACAH,uBAAiB,CAACC,OAAlB,GAA4BG,SAA5B;AACD,KAHD;AAID,GATQ,EASN,EATM,CAAT;AAWA3B,WAAS,CAAC,MAAK;AACb,QAAIuB,iBAAiB,CAACC,OAAtB,EAA+B;AAC7BD,uBAAiB,CAACC,OAAlB,CAA0BI,YAA1B,CAAuCP,MAAvC;AACD;AACF,GAJQ,EAIN,CAACA,MAAD,CAJM,CAAT;AAMA,SACEtB;AACE8B,OAAG,EAAEV,SADP;AAEEW,UAAM,EAAEV,UAAU,CAACU,MAFrB;AAGEC,SAAK,EAAEX,UAAU,CAACW,KAHpB;AAIEd,SAAK,EAAEC,WAJT;AAIoB,mBACN;AALd,IADF;AASD,CA5DM;AA8DP,eAAeX,QAAf","names":["React","useEffect","useRef","SnowfallCanvas","defaultConfig","useComponentSize","useDeepMemo","useSnowfallStyle","Snowfall","color","changeFrequency","radius","speed","wind","rotationSpeed","opacity","snowflakeCount","images","style","mergedStyle","canvasRef","canvasSize","config","configRef","snowfallCanvasRef","current","_a","pause","undefined","updateConfig","ref","height","width"],"sources":["D:\\PortFolio\\node_modules\\react-snowfall\\src\\Snowfall.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react'\r\nimport { SnowfallCanvas, SnowfallCanvasConfig } from './SnowfallCanvas.js'\r\nimport { defaultConfig } from './Snowflake.js'\r\nimport { useComponentSize, useDeepMemo, useSnowfallStyle } from './hooks.js'\r\n\r\nexport interface SnowfallProps extends Partial<SnowfallCanvasConfig> {\r\n  /**\r\n   * Any style properties that will be passed to the canvas element.\r\n   */\r\n  style?: React.CSSProperties\r\n}\r\n\r\nexport const Snowfall = ({\r\n  color = defaultConfig.color,\r\n  changeFrequency = defaultConfig.changeFrequency,\r\n  radius = defaultConfig.radius,\r\n  speed = defaultConfig.speed,\r\n  wind = defaultConfig.wind,\r\n  rotationSpeed = defaultConfig.rotationSpeed,\r\n  opacity = defaultConfig.opacity,\r\n  snowflakeCount = 150,\r\n  images,\r\n  style,\r\n}: SnowfallProps = {}): JSX.Element => {\r\n  const mergedStyle = useSnowfallStyle(style)\r\n\r\n  const canvasRef = useRef<HTMLCanvasElement>(null)\r\n  const canvasSize = useComponentSize(canvasRef)\r\n\r\n  const config = useDeepMemo<SnowfallCanvasConfig>({\r\n    color,\r\n    changeFrequency,\r\n    radius,\r\n    speed,\r\n    wind,\r\n    rotationSpeed,\r\n    images,\r\n    snowflakeCount,\r\n    opacity,\r\n  })\r\n\r\n  // A reference to the config used for creating the initial instance\r\n  const configRef = useRef(config)\r\n\r\n  const snowfallCanvasRef = useRef<SnowfallCanvas>()\r\n\r\n  useEffect(() => {\r\n    if (!snowfallCanvasRef.current && canvasRef.current) {\r\n      snowfallCanvasRef.current = new SnowfallCanvas(canvasRef.current, configRef.current)\r\n    }\r\n\r\n    return () => {\r\n      snowfallCanvasRef.current?.pause()\r\n      snowfallCanvasRef.current = undefined\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (snowfallCanvasRef.current) {\r\n      snowfallCanvasRef.current.updateConfig(config)\r\n    }\r\n  }, [config])\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      height={canvasSize.height}\r\n      width={canvasSize.width}\r\n      style={mergedStyle}\r\n      data-testid=\"SnowfallCanvas\"\r\n    />\r\n  )\r\n}\r\n\r\nexport default Snowfall\r\n"]},"metadata":{},"sourceType":"module"}