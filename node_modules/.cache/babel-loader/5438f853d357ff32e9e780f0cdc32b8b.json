{"ast":null,"code":"import { useCallback, useEffect, useRef, useState, useMemo } from 'react';\nimport isEqual from 'react-fast-compare';\nimport { snowfallBaseStyle } from './config.js';\nimport { getSize } from './utils.js';\n/**\n * Returns the height and width of a HTML element, uses the `ResizeObserver` api if available to detect changes to the\n * size. Falls back to listening for resize events on the window.\n * @param ref A ref to the HTML element to be measured\n */\n\nexport const useComponentSize = ref => {\n  const [size, setSize] = useState(getSize(ref.current));\n  const resizeHandler = useCallback(() => {\n    if (ref.current) {\n      setSize(getSize(ref.current));\n    }\n  }, [ref]);\n  useEffect(() => {\n    const {\n      ResizeObserver\n    } = window;\n    if (!ref.current) return;\n    resizeHandler();\n\n    if (typeof ResizeObserver === 'function') {\n      const resizeObserver = new ResizeObserver(resizeHandler);\n      resizeObserver.observe(ref.current);\n      return () => resizeObserver.disconnect();\n    } else {\n      window.addEventListener('resize', resizeHandler);\n      return () => window.removeEventListener('resize', resizeHandler);\n    }\n  }, [ref, resizeHandler]);\n  return size;\n};\n/**\n * Utility hook that merges any provided styles with the default styles\n * @param overrides The style prop passed into the component\n */\n\nexport const useSnowfallStyle = overrides => {\n  const styles = useMemo(() => ({ ...snowfallBaseStyle,\n    ...(overrides || {})\n  }), [overrides]);\n  return styles;\n};\n/**\n * Same as `React.useEffect` but uses a deep comparison on the dependency array. This should only\n * be used when working with non-primitive dependencies.\n *\n * @param effect Effect callback to run\n * @param deps Effect dependencies\n */\n\nexport function useDeepCompareEffect(effect, deps) {\n  const ref = useRef(deps); // Only update the current dependencies if they are not deep equal\n\n  if (!isEqual(deps, ref.current)) {\n    ref.current = deps;\n  } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n\n  return useEffect(effect, ref.current);\n}\n/**\n * Utility hook to stabilize a reference to a value, the returned value will always match the input value\n * but (unlike an inline object) will maintain [SameValueZero](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * equality until a change is made.\n *\n * @example\n *\n * const obj = useDeepMemo({ foo: 'bar', bar: 'baz' }) // <- inline object creation\n * const prevValue = usePrevious(obj) // <- value from the previous render\n * console.log(obj === prevValue) // <- always logs true until value changes\n */\n\nexport function useDeepMemo(value) {\n  const [state, setState] = useState(value);\n  useDeepCompareEffect(() => setState(value), [value]);\n  return state;\n}","map":{"version":3,"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,EAAyCC,QAAzC,EAAmDC,OAAnD,QAAkE,OAAlE;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,iBAAT,QAAkC,aAAlC;AACA,SAASC,OAAT,QAAwB,YAAxB;AAEA;;;;;;AAKA,OAAO,MAAMC,gBAAgB,GAAIC,GAAD,IAAsC;AACpE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAACI,OAAO,CAACE,GAAG,CAACG,OAAL,CAAR,CAAhC;AAEA,QAAMC,aAAa,GAAGb,WAAW,CAAC,MAAK;AACrC,QAAIS,GAAG,CAACG,OAAR,EAAiB;AACfD,aAAO,CAACJ,OAAO,CAACE,GAAG,CAACG,OAAL,CAAR,CAAP;AACD;AACF,GAJgC,EAI9B,CAACH,GAAD,CAJ8B,CAAjC;AAMAR,WAAS,CAAC,MAAK;AACb,UAAM;AAAEa;AAAF,QAAqBC,MAA3B;AAEA,QAAI,CAACN,GAAG,CAACG,OAAT,EAAkB;AAClBC,iBAAa;;AAEb,QAAI,OAAOC,cAAP,KAA0B,UAA9B,EAA0C;AACxC,YAAME,cAAc,GAAG,IAAIF,cAAJ,CAAmBD,aAAnB,CAAvB;AACAG,oBAAc,CAACC,OAAf,CAAuBR,GAAG,CAACG,OAA3B;AAEA,aAAO,MAAMI,cAAc,CAACE,UAAf,EAAb;AACD,KALD,MAKO;AACLH,YAAM,CAACI,gBAAP,CAAwB,QAAxB,EAAkCN,aAAlC;AAEA,aAAO,MAAME,MAAM,CAACK,mBAAP,CAA2B,QAA3B,EAAqCP,aAArC,CAAb;AACD;AACF,GAhBQ,EAgBN,CAACJ,GAAD,EAAMI,aAAN,CAhBM,CAAT;AAkBA,SAAOH,IAAP;AACD,CA5BM;AA8BP;;;;;AAIA,OAAO,MAAMW,gBAAgB,GAAIC,SAAD,IAAyD;AACvF,QAAMC,MAAM,GAAGnB,OAAO,CACpB,OAAO,EACL,GAAGE,iBADE;AAEL,QAAIgB,SAAS,IAAI,EAAjB;AAFK,GAAP,CADoB,EAKpB,CAACA,SAAD,CALoB,CAAtB;AAQA,SAAOC,MAAP;AACD,CAVM;AAYP;;;;;;;;AAOA,OAAM,SAAUC,oBAAV,CAA+BC,MAA/B,EAA6DC,IAA7D,EAAuF;AAC3F,QAAMjB,GAAG,GAAGP,MAAM,CAAuBwB,IAAvB,CAAlB,CAD2F,CAG3F;;AACA,MAAI,CAACrB,OAAO,CAACqB,IAAD,EAAOjB,GAAG,CAACG,OAAX,CAAZ,EAAiC;AAC/BH,OAAG,CAACG,OAAJ,GAAcc,IAAd;AACD,GAN0F,CAQ3F;;;AACA,SAAOzB,SAAS,CAACwB,MAAD,EAAShB,GAAG,CAACG,OAAb,CAAhB;AACD;AAED;;;;;;;;;;;;AAWA,OAAM,SAAUe,WAAV,CAAyBC,KAAzB,EAAiC;AACrC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoB3B,QAAQ,CAACyB,KAAD,CAAlC;AAEAJ,sBAAoB,CAAC,MAAMM,QAAQ,CAACF,KAAD,CAAf,EAAwB,CAACA,KAAD,CAAxB,CAApB;AAEA,SAAOC,KAAP;AACD","names":["useCallback","useEffect","useRef","useState","useMemo","isEqual","snowfallBaseStyle","getSize","useComponentSize","ref","size","setSize","current","resizeHandler","ResizeObserver","window","resizeObserver","observe","disconnect","addEventListener","removeEventListener","useSnowfallStyle","overrides","styles","useDeepCompareEffect","effect","deps","useDeepMemo","value","state","setState"],"sources":["D:\\PortFolio\\node_modules\\react-snowfall\\src\\hooks.ts"],"sourcesContent":["import { useCallback, useEffect, useRef, useState, useMemo } from 'react'\r\nimport isEqual from 'react-fast-compare'\r\nimport { snowfallBaseStyle } from './config.js'\r\nimport { getSize } from './utils.js'\r\n\r\n/**\r\n * Returns the height and width of a HTML element, uses the `ResizeObserver` api if available to detect changes to the\r\n * size. Falls back to listening for resize events on the window.\r\n * @param ref A ref to the HTML element to be measured\r\n */\r\nexport const useComponentSize = (ref: React.RefObject<HTMLElement>) => {\r\n  const [size, setSize] = useState(getSize(ref.current))\r\n\r\n  const resizeHandler = useCallback(() => {\r\n    if (ref.current) {\r\n      setSize(getSize(ref.current))\r\n    }\r\n  }, [ref])\r\n\r\n  useEffect(() => {\r\n    const { ResizeObserver } = window\r\n\r\n    if (!ref.current) return\r\n    resizeHandler()\r\n\r\n    if (typeof ResizeObserver === 'function') {\r\n      const resizeObserver = new ResizeObserver(resizeHandler)\r\n      resizeObserver.observe(ref.current)\r\n\r\n      return () => resizeObserver.disconnect()\r\n    } else {\r\n      window.addEventListener('resize', resizeHandler)\r\n\r\n      return () => window.removeEventListener('resize', resizeHandler)\r\n    }\r\n  }, [ref, resizeHandler])\r\n\r\n  return size\r\n}\r\n\r\n/**\r\n * Utility hook that merges any provided styles with the default styles\r\n * @param overrides The style prop passed into the component\r\n */\r\nexport const useSnowfallStyle = (overrides?: React.CSSProperties): React.CSSProperties => {\r\n  const styles = useMemo(\r\n    () => ({\r\n      ...snowfallBaseStyle,\r\n      ...(overrides || {}),\r\n    }),\r\n    [overrides],\r\n  )\r\n\r\n  return styles\r\n}\r\n\r\n/**\r\n * Same as `React.useEffect` but uses a deep comparison on the dependency array. This should only\r\n * be used when working with non-primitive dependencies.\r\n *\r\n * @param effect Effect callback to run\r\n * @param deps Effect dependencies\r\n */\r\nexport function useDeepCompareEffect(effect: React.EffectCallback, deps: React.DependencyList) {\r\n  const ref = useRef<React.DependencyList>(deps)\r\n\r\n  // Only update the current dependencies if they are not deep equal\r\n  if (!isEqual(deps, ref.current)) {\r\n    ref.current = deps\r\n  }\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  return useEffect(effect, ref.current)\r\n}\r\n\r\n/**\r\n * Utility hook to stabilize a reference to a value, the returned value will always match the input value\r\n * but (unlike an inline object) will maintain [SameValueZero](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n * equality until a change is made.\r\n *\r\n * @example\r\n *\r\n * const obj = useDeepMemo({ foo: 'bar', bar: 'baz' }) // <- inline object creation\r\n * const prevValue = usePrevious(obj) // <- value from the previous render\r\n * console.log(obj === prevValue) // <- always logs true until value changes\r\n */\r\nexport function useDeepMemo<T>(value: T): T {\r\n  const [state, setState] = useState(value)\r\n\r\n  useDeepCompareEffect(() => setState(value), [value])\r\n\r\n  return state\r\n}\r\n"]},"metadata":{},"sourceType":"module"}